[
  {
    "objectID": "compound_poisson.html",
    "href": "compound_poisson.html",
    "title": "1  Compound Poisson Processes",
    "section": "",
    "text": "In this chapter, we consider a stochastic process \\(X(t)\\) which is not necessarily a counting process. We say \\(X(t)\\) is a compound Poisson process if [ X(t) = _{i = 1}^{N(t)} Y_i ] where \\(N(t)\\) is a Poisson process with rate \\(\\lambda\\) and \\(Y_1, \\ldots\\) are independent, identically distributed random variables, which are also independent of \\(N(t)\\).\nOther examples given in the text include the number of people involved in car accidents at a certain intersection, the amount of money that visitors to a casino lose, and number of people entering a movie theater.\nWe can compute the mean and variance of a compound Poisson process as follows:\nLet’s look at a simulation of a compound Poisson process in order to check these results via an example. We assume that \\(N(t)\\) is a Poisson process with rate 2, and \\(Y_i\\) are iid uniform random variables on the interval \\([0, 1]\\). From Theorem Theorem 1.1, we see that [ E[X(3)] = 2 = 3 ] and [ {}(X(t)) = 3 _0^1 x^2, dx = 2 ] We check this via a simulation. Note that we don’t need to know when the events occur exactly, only how many of them there are before time \\(t = 3\\). That is given by rpois(1, 6)`, as below.\nThat is how we simulate a single trial of the compound Poisson process. To do multiple trials, we put it inside of replicate.\nIf you run the above code a few times, you will see that the mean and variance of the compound Poisson process are as predicted by Theorem Theorem 1.1."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stochastic Processes 4930/5930",
    "section": "",
    "text": "These are notes to accompany STAT 4930/STAT 5930 at Saint Louis University."
  },
  {
    "objectID": "compound_poisson.html#modeling-a-compound-poisson-process",
    "href": "compound_poisson.html#modeling-a-compound-poisson-process",
    "title": "1  Compound Poisson Processes",
    "section": "1.1 Modeling a Compound Poisson Process",
    "text": "1.1 Modeling a Compound Poisson Process\nIn this section, we are interested in the reverse problem: if we are given data, how do we estimate \\(\\lambda\\) and the distribution of \\(Y_1, \\ldots, Y_{N(t)}\\)? For our purposes, we will make some assumptions about what kind of random variable \\(Y_1, \\ldots, Y_n\\) are and then use a goodness-of-fit test to see whether it is a reasonable fit to the data.\nWe start by modeling data that we know the true generative process of. This is so that we can see that out technique is working. In the next example, we will apply our technique to data that we don’t know the true generative process for.\n\n1.1.1 Simulated data\nWe assume that \\(N(t)\\) is Poisson with rate 2, and that \\(Y_1, \\ldots, Y_{N(t)}\\) are iid zero-truncated Poisson random variables with rate 3. Let’s imagine that this is the number of people entering a movie theater. For our simulated data, we are going to assume that we have collected data from time 0 to time 4, and we noted the time of arrival and the number of We create our simulated data as follows. The arrival times \\(S_1, \\ldots, S_{N(t)}\\) say when the groups arrived to the theater, and the values \\(Y_1, \\ldots, Y_{N(t)}\\) say how many people were in each group. We use zero-truncated Poisson because we are assuming that each \\(Y_i > 0\\).\n\nlambda <- 2\nt <- 4\nnum_events <- rpois(1, lambda * t)\ntime_of_events <- sort(runif(num_events, 0, t))\nnum_in_family <- actuar::rztpois(num_events, 3) #sampling from zero-truncated\ndata.frame(trial = 1,\n           time = time_of_events,\n           num_in_family = num_in_family)\n\n  trial       time num_in_family\n1     1 0.08633972             3\n2     1 0.37257810             3\n3     1 3.38794938             3\n4     1 3.74495303             2\n5     1 3.86247067             5\n\n\nTo create a large sample of this type, we use purrr::map_df.\n\nsim_data <- purrr::map_df(1:300, function(x) {\n  num_events <- rpois(1, lambda * t)\n  time_of_events <- sort(runif(num_events, 0, t))\n  num_in_family <- actuar::rztpois(num_events, 3) #sampling from zero-truncated\n  data.frame(trial = x,\n             time = time_of_events,\n             num_in_family = num_in_family)\n})\n\nFirst things first, let’s check whether every trial had at least one family arrive:\n\nlength(unique(sim_data$trial)) #yep!\n\n[1] 300\n\n\nIn order to estimate the rate of the Poisson process \\(N(t)\\), we recall that the expected value of \\(N(4)\\) is \\(4\\lambda\\). We can estimate \\(E[N(4)]\\) from the data by counting the total number of occurrences by time 4, and dividing by the total number of trials. In other words,\n\nnrow(sim_data)/300\n\n[1] 8.386667\n\n\nOur estimate for trhe mean of \\(N(4)\\) is 8.387, so our estimate for \\(\\lambda\\) is our previous estimate divided by 4; namely, 2.097. You should compare that to the true value of 2.\nNow we turn to estimating the mean of the truncated Poisson process. The method of moments estimator for \\(\\lambda\\), is given by [ = ] where \\(\\overline{x}\\) is the sample mean. We compute the sample mean as follows:\n\nmean(sim_data$num_in_family)\n\n[1] 3.164149\n\n\nand to solve for \\(\\hat \\lambda\\), well, that is a bit tricky, but we already know it is 3. Let’s just check:\n\n3/(1 - exp(-3))\n\n[1] 3.157187\n\n\nPretty good. If we want to solve for \\(\\hat \\lambda\\), we can use optimize:\n\noptimize(f = function(lambda) {(lambda/(1 - exp(-lambda)) - mean(sim_data$num_in_family))^2 },\n         interval = c(0, 10))\n\n$minimum\n[1] 3.007852\n\n$objective\n[1] 2.030503e-11\n\n\nOur estimate \\(\\hat \\lambda\\) is given by the value in $minimum. We can also check via a plot that it is about \\(\\hat \\lambda = 3\\).\n\ncurve(x/(1 - exp(-x)), from = 0, to = 5)\nabline(h = mean(sim_data$num_in_family))\nabline(v = 3, lty = 2, col = 2)"
  }
]