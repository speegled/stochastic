# Birth-and-Death Process {#birth-and-death}

A continuous-time Markov chain is a continuous stochastic process in which, for each state, the process will change state according to an exponential random variable and then move to a different state as specified by the probabilities of a stochastic matrix. [Wikipedia](https://en.wikipedia.org/wiki/Continuous-time_Markov_chain) Let's spend some time thinking about this in more detail.

Let $X(t)$ denote the state that the Markov chain is in at time $t$ for $t\ge 0$. $X(0)$ is the initial state of the process. The process will[^1] change states for the first time $t_1$ according to an exponential distribution with some rate $r$. So, $X(t) = X(0)$ for $0\le t \le t_1$, and then $X(t)$ will be different for $t > t_1$. How does it change? According to a transition matrix, just like a regular old Markov chain.

For a homogenous Poisson process, we have the following transition matrix:

$$
\begin{pmatrix}
0&1&0&0&0&\cdots\\
0&0&1&0&0&\cdots\\
0&0&0&1&0&\cdots\\
0&0&0&0&1&\cdots\\
\vdots&\vdots&\vdots&\vdots&\vdots
\end{pmatrix}
$$

This means that every time there is a transition, $X(t)$ increases by exactly 1.

For a compound Poisson process with $X(t) = \sum_{i = 1}^N(t) Y_i$ where $Y_i$ is 1 with probability $p$ and 2 with probability $1 - p$, we would have the following transition matrix:

$$
\begin{pmatrix}
0&p&1 - p&0&0&\cdots\\
0&0&p&1-p&0&\cdots\\
0&0&0&p&1-p&\cdots\\
0&0&0&0&p&\cdots\\
\vdots&\vdots&\vdots&\vdots&\vdots
\end{pmatrix}
$$

In both cases, $X(t)$ the number of occurrences at or before time $t$ is a continuous time Markov chain with the associated transition matrix.

Now, here is how a birth and death process works. If we are given that $X(t) = n$, the time to transition to state $n + 1$ is exponentially distributed with rate $\lambda_n$, and the time to transition to state $n - 1$ is exponentially distributed with rate $\mu_n$. The process will transition to the state that has the shorter waiting time, and then reset. Therefore, the time until any kind of transition is **the minimum** of two exponential random variables. What kind of random variable is that?


```{r}
simdata <- replicate(10000, {
  min(rexp(1, 2), rexp(1, 4))
})
hist(simdata, probability = T)
curve(dexp(x, 6), add = T, col = 2)
```

The above plot shows that the minimum of an independent exponentials with rates 2 and 4 is an exponential random variable with rate 6. 

:::callout-tryit
Let $X$ and $Y$ be independent exponential random variables with rates 1 and 3. Use simulation to determine what kind of random variable the minimum of $X$ and $Y$ is.
:::

From the above computations, we are convinced that the time to a transition is *exponentially distributed* with rate $\lambda_n + \mu_n$. Therefore, the first criterion for a birth-and-death process is satisfied. Next, we need to see what the transition probabilities are. Let $T_B$ be the waiting time until the upward transition, and let $T_D$ be the waiting time until the downward transition. Think of the upward transition as representing the birth of a new object, and the downard time as the death of an object.

:::callout-tryit
Suppose $T_B$ is exponential with rate 2 and $T_D$ is exponential with rate 1. Estimate $P(T_D < T_B)$ using simulations.
:::

::: {#thm-probability-transition}
If $T_B$ is an exponential random variable with rate $\lambda_n$ and $T_D$ is an exponential random variable with rate $\mu_n$, then $P(T_D < T_B) = \frac{\mu_n}{\lambda_n + \mu_n}$.
:::

In summary, the transition matrix for a birth and death process looks like this:

$$
\begin{pmatrix}
0&1&0&0&0&\cdots\\
\frac{\mu_1}{\lambda_1 + \mu_1}&0&\frac{\lambda_1}{\lambda_1 + \mu_1}&0&0&\cdots\\
0&\frac{\mu_2}{\lambda_2 + \mu_2}&0&\frac{\lambda_2}{\lambda_2 + \mu_2}&0&\cdots\\
0&0&\frac{\mu_3}{\lambda_3 + \mu_3}&0&\frac{\lambda_3}{\lambda_3 + \mu_3}&\cdots\\
\vdots&\vdots&\vdots&\vdots&\vdots
\end{pmatrix}
$$

::: {#exm-mm1-queue}
If customers arrive in a queue according to a Poisson process with rate $\lambda$, and customers are served and exit from the queue according to a Poisson process with rate $\mu$, then $X(t)$ the number of people in the queue at time $t$ is a birth-and-death process with transition times exponentially distributed with rate $\lambda + \mu$, and transition matrix

$$
\begin{pmatrix}
0&1&0&0&0&\cdots\\
\frac{\mu}{\lambda + \mu}&0&\frac{\lambda}{\lambda + \mu}&0&0&\cdots\\
0&\frac{\mu}{\lambda + \mu}&0&\frac{\lambda}{\lambda + \mu}&0&\cdots\\
0&0&\frac{\mu}{\lambda + \mu}&0&\frac{\lambda}{\lambda + \mu}&\cdots\\
\vdots&\vdots&\vdots&\vdots&\vdots
\end{pmatrix}
$$

Suppose that the rate at which people arrive is 30 per hour, and the rate at which they are served is 30 per hour. What is the expected value of the maximum number of people in the queue over the course of an 8 hour day? What is the expected wait time of a customer before being served? We will need to do some simulations to do this, so we delay, but these are the types of questions we are interested in answering.
:::

## Simulations

In this section, we show how to simulate from a birth-and-death process, and we show how to use those simulations to answer questions of interest. Our motivating question is the following. Suppose customers arrive at a bank at a rate of 30 per hour. Customers are served also at a rate of 30 per hour. What is the expected number of customers in line when the bank closes after 8 hours?

We first show how to simulate birth-and-death processes when the birth rate and death rate are **constant**, except that the death rate is 0 when $X(t) = 0$. We assume that the birth rate is 2 and the death rate is 1.5. We simulate for 5 units of time. I try to avoid doing things using loops, but I really think in this case, loops are the easiest way to proceed.

```{r}
current_time <- 0 
change_times <- numeric(0) #vector of all places births/deaths occur
current_state <- 0
states <- current_state #vector of all states
while(current_time < 5) {
  #get time of next change and new state
  if(current_state == 0) { 
    current_time <- current_time + rexp(1, 2)
    current_state <- 1
  } else { 
    current_time <- current_time + rexp(1, 3.5)
    current_state <- current_state + sample(c(-1, 1), size = 1, prob = c(1.5, 2))
  }
  #update change times and states
  if(current_time < 5) { 
    change_times <- c(change_times, current_time)
    states <- c(states, current_state)
  }
}
plot(stepfun(x = change_times, y = states), xlim = c(0, 5))
```

:::callout-tryit
Simulate a birth-and-death process where the birth rate is 1 and the death rate is also 1 for a period of 10 time units. Plot your simulation.
:::

OK, now we will simulate a process where customers are arriving at a rate of 30 per hour and also being served at a rate of 30 per hour for one hour.

```{r}
birth_rate <- 30
death_rate <- 30
max_time <- 1
current_time <- 0 
change_times <- numeric(0) 
current_state <- 0
states <- current_state
while(current_time < max_time) {
  if(current_state == 0) { 
    current_time <- current_time + rexp(1, birth_rate)
    current_state <- 1
  } else { 
    current_time <- current_time + rexp(1, death_rate + birth_rate)
    current_state <- current_state + sample(c(-1, 1), size = 1, prob = c(death_rate, birth_rate))
  }
  if(current_time < max_time) { 
    change_times <- c(change_times, current_time)
    states <- c(states, current_state)
  }
}
plot(stepfun(x = change_times, y = states), xlim = c(0, max_time))
```

We are now ready to answer the question asked at the start of the section. What is the expected number of customers waiting in line when the bank closes? We modify the code so that `current_state` never becomes the value of the state at the first change after `max_time` by adding an `if` statement that only updates `states` if it is a legitimate update.

```{r}
library(future)
set.seed(1) #to get consistent results when re-compiling
birth_rate <- 30
death_rate <- 30
max_time <- 8
plan(multisession, workers = 8)
sim_data <- future.apply::future_replicate(1000, {
  current_time <- 0 
  change_times <- numeric(0) 
  current_state <- 0
  states <- current_state
  while(current_time < max_time) {
    if(current_state == 0) { 
      current_time <- current_time + rexp(1, birth_rate)
    } else { 
      current_time <- current_time + rexp(1, death_rate + birth_rate)
    }
    if(current_time < max_time) { 
      if(current_state == 0) {
        current_state <- 1
      } else {
        current_state <- current_state + sample(c(-1, 1), size = 1, prob = c(death_rate, birth_rate))
      }
      change_times <- c(change_times, current_time)
      states <- c(states, current_state)
    }
  }
  current_state
})
```

```{r}
mean(sim_data)
```

We expect there to be about 17 people in line when the bank closes. 

```{r}
quantile(sim_data, c(.025, .975))
```

With probability 95 percent, there will be between 0 and 48 people in line when the bank closes. This illustrates a fact that is counter-intuitive for some people. If you want to avoid a long line forming at your business, you have to be able to process people **faster** than they arrive. Processing them at the same rate as they arrive is not enough.

:::callout-tryit
- Estimate the probability that the line is empty when the bank closes.
- Estimate the expected value of the longest line observed throughout the day.
- **Harder** Estimate the expected *wait time* of a customer arriving right before closing.
:::

## More simulations

Another possible quantity of interest is the mean weight time of customers in a queue. We may or may not want to include the time that the customer spends being served in our estimate, but for this example we **will** include the time that the customer spends being served. So, for each customer, we need to keep track of when they arrive (birth-time), and when they are served (death-time). We will modify our code from the previous section to accomplish this. We assume births last until `max_time`, and then the queue is cleared out without any more births.

```{r}
#| message: false
#| warning: false
library(dplyr) #for bind_rows
birth_rate <- 30
death_rate <- 30
max_time <- 8

current_customer <- 0
current_time <- 0 
change_times <- numeric(0) #vector of all places births/deaths occur
current_state <- 0
states <- current_state #vector of all states
queue <- data.frame(
  customer = numeric(0),
  birth_time = numeric(0),
  death_time = numeric(0)
)
while(current_time < max_time) {
  #get time of next change and new state
  if(current_state == 0) { 
    current_time <- current_time + rexp(1, birth_rate)
    if(current_time > max_time) break #no more updates after max_time
    current_state <- 1
    current_customer <- current_customer + 1
    queue <- bind_rows(
        queue,
        data.frame(customer = current_customer,
                   birth_time = current_time,
                   death_time = NA)
      )
  } else { 
    current_time <- current_time + rexp(1, birth_rate + death_rate)
    if(current_time > max_time) break #no more updates after max_time
    birth_or_death <- sample(c(-1, 1), size = 1, prob = c(death_rate, birth_rate))
    current_state <- current_state + birth_or_death
    if(birth_or_death == 1) {
      current_customer <- current_customer + 1
      queue <- bind_rows(
        queue,
        data.frame(customer = current_customer,
                   birth_time = current_time,
                   death_time = NA)
      )
    } else {
      customer_served <- min(which(is.na(queue$death_time)))
      queue[customer_served, "death_time"] <- current_time
    }

  }
}
#now we find all of the death times for the people still in the queue at max_time
if(any(is.na(queue$death_time))) {
  for(i in which(is.na(queue$death_time))) {
    queue$death_time[i] <- current_time + rexp(1, death_rate)
    current_time <- queue$death_time[i]
  }
}
head(queue)
```

:::callout-tryit
- These are the not to hand in problems.
- Find the expected mean wait time over the course of an 8 hour day. (Hint: you may wish to use `future.apply::future_replicate` to run this simulation in parallel.)
- Find the expected maximum wait time over the course of an 8 hour day.
- Suppose the teller's speed is reduced by 5 percent. About what percentage does the expected maximum wait time change?
- What would the rate of the teller have to be for the expected maximum wait time to be less than 15 minutes?
:::


```{r, echo=FALSE, eval=FALSE}
#don't look at this on github, that would be cheating! I mean you, Troy.
birth_rate <- 30 
death_rate <- 30
max_time <- 8
system.time(sim_data <- replicate(1000, {
  current_customer <- 0
  current_time <- 0 
  change_times <- numeric(0) #vector of all places births/deaths occur
  current_state <- 0
  states <- current_state #vector of all states
  queue <- data.frame(
    customer = numeric(0),
    birth_time = numeric(0),
    death_time = numeric(0)
  )
  while(current_time < max_time) {
    #get time of next change and new state
    if(current_state == 0) { 
      current_time <- current_time + rexp(1, birth_rate)
      current_state <- 1
      current_customer <- current_customer + 1
      if(current_time > max_time) break
      queue <- bind_rows(
        queue,
        data.frame(customer = current_customer,
                   birth_time = current_time,
                   death_time = NA)
      )
    } else { 
      current_time <- current_time + rexp(1, birth_rate + death_rate)
      birth_or_death <- sample(c(-1, 1), size = 1, prob = c(death_rate, birth_rate))
      current_state <- current_state + birth_or_death
      if(birth_or_death == 1) {
        if(current_time > max_time) break
        current_customer <- current_customer + 1
        queue <- bind_rows(
          queue,
          data.frame(customer = current_customer,
                     birth_time = current_time,
                     death_time = NA)
        )
      } else {
        customer_served <- min(which(is.na(queue$death_time)))
        queue[customer_served, "death_time"] <- current_time
      }
      
    }
  }
  if(any(is.na(queue$death_time))) {
    for(i in which(is.na(queue$death_time))) {
      queue$death_time[i] <- current_time + rexp(1, death_rate)
      current_time <- queue$death_time[i]
    }
  }
  max(queue$death_time - queue$birth_time)
}))
hist(sim_data)
mean(sim_data)
plan(sequential)

```


## Stationary distribution

Simple birth-and-death processes with a constant rate of births and deaths are called an M/M/1 queue. It can be challenging to answer questions about the queue when $t$ is small, but the limiting behavior is much easier to understand. Let $P_n(t) = P(X(t) = n)$ be the probability that the birth-and-death process is in state $n$ at time $t$. We define $P_n = \lim_{t\to \infty} P_n(t)$. If the birth-rate $\lambda$ is larger than the death rate $\mu$, then this doesn't make sense, because $X(t) \to \infty$ and will never equal $n$ past some point. This quantity only makes sense when $\lambda < \mu$, in which case it is given as follows:

$$
P_n = \left(1 - \lambda/\mu\right) \left(\lambda/\mu\right)^n
$$

This says that the "long run distribution" of state $i$ is geometric with probability of success $(1 - \lambda/\mu)$. Let's verify this via simulation. We take $\lambda = 1$ and $\mu = 3$, and `max_time = 100`. We find the state that the process is in at time 40, and replicate. That should be approximately the long run distribution of $P_n$.

```{r}
set.seed(1) #to get consistent results when re-compiling
birth_rate <- 1
death_rate <- 3
max_time <- 40
sim_data <- future.apply::future_replicate(10000, {
  current_time <- 0 
  change_times <- numeric(0) 
  current_state <- 0
  states <- current_state
  while(current_time < max_time) {
    if(current_state == 0) { 
      current_time <- current_time + rexp(1, birth_rate)
      current_state <- 1
    } else { 
      current_time <- current_time + rexp(1, death_rate + birth_rate)
      current_state <- current_state + sample(c(-1, 1), size = 1, prob = c(death_rate, birth_rate))
    }
    if(current_time < max_time) { 
      change_times <- c(change_times, current_time)
      states <- c(states, current_state)
    }
  }
  states[length(states)] 
  #' 
  #' Note: it is **wrong** to use current_state here the way we have coded it! 
  #' 
})
barplot(table(sim_data))
data.frame(observed = proportions(table(sim_data)),
           theory = dgeom(sort(unique(sim_data)), prob = 2/3)) #pretty close match
```

:::callout-tryit
- Find the long-run probability that there are 4 people in the queue when $\lambda = 1$ and $\mu = 1.5$. Verify via simulation.
- The long-run expected number of people in the queue is $\frac{\lambda}{\mu - \lambda}$. Verify this via simulation for $\lambda = 1$ and $\mu = 2$. (Note what this says when $\mu$ is just barely larger than $\lambda$, though!)
- **Grad Students** If a new person enters the queue after it has been running a long-time, the distribution of that person's wait times until being served is exponential with rate $\mu - \lambda$. Verify this via simulation when $\lambda = 2$ and $\mu = 3$. **Note** it is easy to mess this up. One way to do it correctly is to find the time of the last arrival before `max_time`, compute the length of time that arrival has to wait to be served, and replicate. (This is the sum of the time waiting in the queue (if any) and the time being served.) You should verify that is an exponential distribution with rate $\mu - \lambda$.
:::



```{r eval=F, echo=F}
#We also could have done this by simulating the queue like we did above with a **single** long simulation and estimating the percentage of **time** that the birth-and-death process is in each state. Let's see how to do it like that.
birth_rate <- 1
death_rate <- 3
max_time <- 10000

current_customer <- 0
current_time <- 0 
change_times <- numeric(0) #vector of all places births/deaths occur
current_state <- 0
states <- current_state #vector of all states
queue <- data.frame(
  customer = numeric(0),
  birth_time = numeric(0),
  death_time = numeric(0)
)
while(current_time < max_time) {
  #get time of next change and new state
  if(current_state == 0) { 
    current_time <- current_time + rexp(1, birth_rate)
    current_state <- 1
    current_customer <- current_customer + 1
    if(current_time > max_time) break
    queue <- bind_rows(
        queue,
        data.frame(customer = current_customer,
                   birth_time = current_time,
                   death_time = NA)
      )
  } else { 
    current_time <- current_time + rexp(1, birth_rate + death_rate)
    birth_or_death <- sample(c(-1, 1), size = 1, prob = c(death_rate, birth_rate))
    current_state <- current_state + birth_or_death
    if(birth_or_death == 1) {
      if(current_time > max_time) break
      current_customer <- current_customer + 1
      queue <- bind_rows(
        queue,
        data.frame(customer = current_customer,
                   birth_time = current_time,
                   death_time = NA)
      )
    } else {
      customer_served <- min(which(is.na(queue$death_time)))
      queue[customer_served, "death_time"] <- current_time
    }

  }
}
if(any(is.na(queue$death_time))) {
  for(i in which(is.na(queue$death_time))) {
    queue$death_time[i] <- current_time + rexp(1, death_rate)
    current_time <- queue$death_time[i]
  }
}
head(queue)
```


```{r eval=F, echo=F}
#For each birth and death time listed in the queue, we find the number of customers in the queue.

xt <- data.frame(length = 0, time = 0, change = 0)
for(tt in queue$birth_time) {
  xt <- bind_rows(xt,
            data.frame(length = NA, time = tt, change = 1))
}
for(tt in queue$death_time) {
  xt <- bind_rows(xt,
            data.frame(length = NA, time = tt, change = -1))
}
xt <- xt %>% 
  arrange(time) %>% 
  mutate(length = cumsum(change)) %>% 
  filter(time > 10)
dd <- data.frame(state = xt$length[1:(nrow(xt) - 1)],
                 time = diff(xt$time))
dd %>% 
  group_by(state) %>% 
  summarize(time = sum(time)) %>% 
  mutate(time = time/sum(time)) %>% 
  mutate(exp = dgeom(0:8, 2/3))
```




```{r}
plan(sequential)
```





[^1]: Well, it is posible that the process will still be in the same state after $t_1$ if there are loops; that is, if it is possible for the associated Markov chain to tranistion from a state $i$ back to state $i$. That isn't the case for birth-and-death processes.